# ----------------------------------------------------------------------------------
# Template Name: WU-SP-NP-EC2-NSGatewayProxyServer.yml
# Script Creator: Ankit Chandre (WUSPEEDPAY)
# Description: Stack for creating Reverse Proxy for API gateway
#-----------------------------------------------------------------------------------
AWSTemplateFormatVersion: "2010-09-09"
Description: Stack for creating CI/CD pipeline
Parameters:
  Ansible:
    Type: String
    Description: Instance for Ansible Master
    Default: "Ansible-Master"
  SPQWAPP01E1AImageId:
    Type: String
    Description: AMI Image to be used for instance.
    Default: ami-0ff8a91507f77f867
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Key Pair for instance"
    Default: "Outlook-key-pair"

  Environment:
    Description: "Environment"
    Type: String
    Default: Assignment
Resources:
  Ansile:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref SPQWAPP01E1AImageId
      SecurityGroupIds:
        - !ImportValue WU-SP-NP-SG-UE1-ADClient
        - !ImportValue WU-SP-NP-SG-UE1-InfoSec
        - !ImportValue WU-SP-NP-SG-UE1-LinuxBastionClient
        - !ImportValue WU-SP-NP-SG-UE1-LinuxPatchingClient
        - !ImportValue WU-SP-NP-SG-UE1-WAPP
        - !ImportValue WU-SP-NP-SG-UE1-NetBackupClient
        - !ImportValue WU-SP-NP-SG-UE1-OnPrem
      SubnetId: subnet-4c063729
      # This subnet maps to WU-SP-D-NET-UE1-A-WEB for reference
      InstanceType: t2.medium
      KeyName: !Ref KeyPair
      Tags:
        - Key: "Name"
          Value: !Ref SPQWAPP01E1AName
        - Key: "Application"
          Value: !Sub "SpeedPay:${Environment}:WAPP"
        - Key: "ResourceName"
          Value: !Sub "APP:${Environment}:WEB"
        - Key: "ProductTower"
          Value: !Ref ProductTower
        - Key: "ApplicationOwner"
          Value: !Ref ApplicationOwner
        - Key: "ClarityID"
          Value: !Ref ClarityID
        - Key: "SupportContact"
          Value: !Ref SupportContact
        - Key: "SecurityPosture"
          Value: !Ref SecurityPosture
        - Key: "Description"
          Value: "Reverse Proxy for API gateway"
        - Key: "Domain"
          Value: !Ref Domain
        - Key: "OSName"
          Value: "Linux:Amazon"
        - Key: "Backup"
          Value: ""
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            OLD_HOSTNAME="$(hostname)"
            NEW_HOSTNAME="${SPQWAPP01E1AName}"

            hostname "$NEW_HOSTNAME"

            if [ -n "$( grep -i "HOSTNAME=$OLD_HOSTNAME" /etc/sysconfig/network )" ]; then
            sed -i "s/$OLD_HOSTNAME/$NEW_HOSTNAME/g" /etc/sysconfig/network
            else
            sed -i /HOSTNAME=/d /etc/sysconfig/network
            sed -i /$OLD_HOSTNAME/d /etc/sysconfig/network
            echo -e "HOSTNAME=$NEW_HOSTNAME" >> /etc/sysconfig/network
            fi

            if [ -n "$( grep -i "preserve_hostname: false" /etc/cloud/cloud.cfg )" ]; then
            sed -i "s/preserve_hostname\: false/preserve_hostname\: true/g" /etc/cloud/cloud.cfg
            else
                if [ -n "$( grep -i "preserve_hostname: true" /etc/cloud/cloud.cfg )" ]; then
                echo
                else
                echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg
                fi
            fi
            # Ensure proper DNS servers and search suffixes are in dhclient.conf
            echo timeout 300\; > /etc/dhcp/dhclient.conf
            echo supersede domain-name \"${DNSSearchSuffix}\"\; >> /etc/dhcp/dhclient.conf
            echo supersede domain-name-servers ${DNSServers} \; >> /etc/dhcp/dhclient.conf
            echo search ${DNSSearchSuffix} > /etc/resolv.conf
            echo nameserver 10.19.99.38 >> /etc/resolv.conf
            echo nameserver 10.16.18.38 >> /etc/resolv.conf
            # Ensure NTP is syncing with the correct servers
            NTPServer1=$(echo ${NTPServers} | cut -d, -f1)
            NTPServer2=$(echo ${NTPServers} | cut -d, -f2)
            NTPServer3=$(echo ${NTPServers} | cut -d, -f3)
            NTPServer4=$(echo ${NTPServers} | cut -d, -f4)
            sed -i '/^server/d' /etc/ntp.conf
            echo >> /etc/ntp.conf
            echo server $NTPServer1 >> /etc/ntp.conf
            echo server $NTPServer2 >> /etc/ntp.conf
            echo server $NTPServer3 >> /etc/ntp.conf
            echo server $NTPServer4 >> /etc/ntp.conf
            # Update sudoers file(s) as appropriate
            echo '%DEVSPEEDPAY\\sysops ALL=(ALL) ALL' | sudo EDITOR='tee -a' visudo -f /etc/sudoers.d/sysops
            echo '%sysops ALL=(ALL) ALL' | sudo EDITOR='tee -a' visudo -f /etc/sudoers.d/sysops
            echo '%DEVSPEEDPAY\\dev-nextgen ALL=(ALL) ALL' | sudo EDITOR='tee -a' visudo -f /etc/sudoers.d/devops
            echo '%dev-nextgen ALL=(ALL) ALL' | sudo EDITOR='tee -a' visudo -f /etc/sudoers.d/devops
            echo '%DEVSPEEDPAY\\dev-apollo ALL=(ALL) ALL' | sudo EDITOR='tee -a' visudo -f /etc/sudoers.d/devops
            echo '%dev-apollo ALL=(ALL) ALL' | sudo EDITOR='tee -a' visudo -f /etc/sudoers.d/devops
            echo '%DEVSPEEDPAY\\wus-prodnxgensupport ALL=(ALL) ALL' | sudo EDITOR='tee -a' visudo -f /etc/sudoers.d/devops
            echo '%wus-prodnxgensupport ALL=(ALL) ALL' | sudo EDITOR='tee -a' visudo -f /etc/sudoers.d/devops
            echo 'DEVSPEEDPAY\\sa-nprdoctodeploy ALL=NOPASSWD: /sbin/service openresty *, /sbin/service awslogs *, /home/sa-nprdoctodeploy/devops_toolset/python/cloudwatch_config.py *' | sudo EDITOR='tee -a' visudo -f /etc/sudoers.d/octopus
            echo 'sa-nprdoctodeploy ALL=NOPASSWD: /sbin/service openresty *, /sbin/service awslogs *, /home/sa-nprdoctodeploy/devops_toolset/python/cloudwatch_config.py *' | sudo EDITOR='tee -a' visudo -f /etc/sudoers.d/octopus
            # Create dirs/update permissions for Openresty
            mkdir /var/log/nginx
            mkdir /var/www
            chown -R 1459619568:1459620951 /var/log/nginx
            chown -R 1459619568:1459620951 /var/www
            sed -i '/^user/d' /usr/local/openresty/nginx/conf/nginx.conf
            sed -i '/^\#user/a user  sa-nprdoctodeploy\;' /usr/local/openresty/nginx/conf/nginx.conf
            chown -R 1459619568:1459620951 /usr/local/openresty
            # Make sure QRadar is pointing to the current server - leftover from 2017
            sed -i "s/\@\@10.38.16.151/\@\@10.38.49.34/g" /etc/rsyslog.d/21-qradar.conf

            #!/bin/sh
yum update â€“y
wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat/jenkins.repo
rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key
yum install jenkins -y
yum install java-1.8.0 -y
yum remove java-1.7.0-openjdk -y 
pip install ansible
service jenkins start

  ADLinuxDomainJoinDocumentAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: !Ref SSMLinuxDocumentStackName
      Targets:
      - Key: InstanceIds
        Values:
        - !Ref 'SPQWAPP01E1A'
Outputs:
  SPQWAPP01E1ATEST:
    Description: Instance to run Reverse Proxy for API gateway
    Value: !Ref SPQWAPP01E1A
    Export:
      Name: SPQWAPP01E1AExportTEST
