Description: 
    This Cft deploys a VPC with IG attached. It will have two subnets 1 private and 1 public
    Public subnet will have NAT gateway attached.
Parameters:
  Environment:
    Description: "Environment"
    Type: String
    Default: Assignment
  VpcCIDR: 
    Description: CIDR of VPC
    Type: String
    Default: 172.20.0.0/16
  MyPublicCIDR:
    Description: CIDR of public subnet
    Type: String
    Default: 172.20.10.0/24
  MyPrivateCIDR:
    Description: CIDR of private CIDR
    Type: String
    Default: 172.20.20.0/24
  Ansible:
    Type: String
    Description: Instance for Ansible Master
    Default: "Ansible-Master"
  AMIImageId:
    Type: String
    Description: AMI Image to be used for instance.
    Default: "ami-0ff8a91507f77f867"
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Key Pair for instance"
    Default: "Offc-laptop.pem"

Resources:
    myVPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            Tags: 
                - Key: Name 
                  Value: !Ref Environment            
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref Environment            
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref myVPC
    PublicSubnet: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref myVPC
            CidrBlock: !Ref MyPublicCIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${Environment} Public Subnet
    PrivateSubnet: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref myVPC
            CidrBlock: !Ref MyPrivateCIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${Environment} Private Subnet
    NatGatewayEIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties: 
            Domain: vpc
    NatGateway: 
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt NatGatewayEIP.AllocationId
            SubnetId: !Ref PublicSubnet
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId:  !Ref myVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${Environment} Public Routes

    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet

    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref myVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${Environment} Private Routes

    DefaultPrivateRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway

    PrivateSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            SubnetId: !Ref PrivateSubnet
    InstanceSecurityGroupssh:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Enable SSH access via port 22
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: '22'
              ToPort: '22'
              CidrIp: 0.0.0.0/0
            VpcId: !Ref myVPC
    InstanceSecurityGroupjenkins:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Enable Jenkins access via port 8080
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: '8080'
              ToPort: '8080'
              CidrIp: 0.0.0.0/0
            VpcId: !Ref myVPC

    AnsibleMaster:
        Type: AWS::EC2::Instance
        Properties:
          InstanceType: t2.medium
          SecurityGroupIds:
            - !Ref InstanceSecurityGroupjenkins
            - !Ref InstanceSecurityGroupssh
          KeyName: !Ref KeyPair
          ImageId: !Ref AMIImageId
          SubnetId: !Ref PublicSubnet
          Tags:
            - Key: "Name"
              Value: "Master"


          UserData:
            Fn::Base64:
                !Sub |
                #!/bin/bash
                yum update –y
                wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat/jenkins.repo
                rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key
                yum install jenkins -y
                yum install java-1.8.0 java-1.8.0-openjdk-devel -y
                yum remove java-1.7.0-openjdk -y 
                pip install ansible
                service jenkins start
    AnsibleSlave:
        Type: AWS::EC2::Instance
        Properties:
          InstanceType: t2.medium
            
          SecurityGroupIds:
            - !Ref InstanceSecurityGroupssh
          KeyName: !Ref KeyPair
          ImageId: ami-0ff8a91507f77f867
          SubnetId: !Ref PrivateSubnet
          Tags:
            - Key: "Name"
              Value: "Slave"


          UserData:
            Fn::Base64:
                !Sub |
                #!/bin/bash
                yum update –y
                yum install java-1.8.0 java-1.8.0-openjdk-devel -y
                yum remove java-1.7.0-openjdk -y 

Outputs: 

    VPC: 
        Description: A reference to the created VPC
        Value: !Ref myVPC

    PublicSubnet:
        Description: Public Subnet 
        Value: !Ref PublicSubnet

    PrivateSubnet:
        Description: Private Subbnet
        Value:  !Ref PrivateSubnet
        

